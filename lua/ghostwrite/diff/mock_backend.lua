local manager = require("ghostwrite.diff.manager")
local Diff = require("ghostwrite.diff")
local M = {}

-- Dummy get_diff() for diff testing
-- In the future, this structure would be generated by the Rust backend.

-- The Rust diff builder will:
-- 1. Loop through both strings (current and suggested), char by char.
-- 2. Group contiguous "same" or "diff" characters into segments.
-- 3. When the comparison mode switches (same → diff or diff → same), flush the current segment.
-- 4. Repeat until the entire string is processed.
-- 5. Return a table of segments with each segment tagged as "same" or "diff".

-- This allows precise visual diffs while keeping the structure clean and simple to render in Lua
function M.mock_diff()
	-- Returns:
	-- {
	--   id = <number>, -- simple, sequential integer ID (e.g. 1, 2, 3, ...)
	--   file = <string>, -- path to the file where the diff applies
	--   start_line = <number>, -- 0-based start line of the diff (inclusive)
	--   end_line = <number>,   -- 0-based end line of the diff (inclusive)
	--   current = {
	--     [<line_number>] = { -- 0-based, supporting multiline diffs
	--       segments = {
	--         { text = <string>, tag = "same" | "diff" },
	--         ...
	--       },
	--     },
	--     ...
	--   },
	--   suggested = {
	--     [<line_number>] = {
	--       segments = {
	--         { text = <string>, tag = "same" | "diff" },
	--         ...
	--       },
	--     },
	--     ...
	--   },
	-- }

	local diff_data = {
		id = 1,
		file = "example.lua",
		start_line = 0,
		end_line = 0,
		current = {
			[0] = { -- 0-based line index
				segments = {
					{ text = "local", tag = "diff" },
					{ text = " M = {}", tag = "same" },
				},
			},
		},
		suggested = {
			[0] = {
				segments = {
					{ text = "change", tag = "diff" },
					{ text = " M = {}", tag = "same" },
				},
			},
		},
	}

	local diff = Diff:new(diff_data)
	manager.add(diff)
end

return M
