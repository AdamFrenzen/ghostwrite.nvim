local M = {}
local diff_keybinds = require("ghostwrite.diff.keybinds")

-- Load the hl_groups
require("ghostwrite.diff.highlights")

-- Namespace for the diff visuals
local ns_id = vim.api.nvim_create_namespace("ghostwrite_diff_inline")

-- Dummy get_diff() for diff testing
-- In the future, this structure would be generated by the Rust backend.

-- The Rust diff builder will:
-- 1. Loop through both strings (current and suggested), char by char.
-- 2. Group contiguous "same" or "diff" characters into segments.
-- 3. When the comparison mode switches (same → diff or diff → same), flush the current segment.
-- 4. Repeat until the entire string is processed.
-- 5. Return a table of segments with each segment tagged as "same" or "diff".

-- This allows precise visual diffs while keeping the structure clean and simple to render in Lua
local function get_diff()
	-- Returns:
	-- {
	--   current = {
	--     line = <number>, -- 0 based
	--     segments = { { text = <string>, tag = "same" | "diff" }, ... },
	--   },
	--   suggested = {
	--     line = <number>, -- 0 based
	--     segments = { { text = <string>, tag = "same" | "diff" }, ... },
	--   },
	-- }
	return {
		current = {
			line = 0,
			segments = {
				{ text = "local", tag = "diff" },
				{ text = " M = {}", tag = "same" },
			},
		},
		suggested = {
			line = 0,
			segments = {
				{ text = "change", tag = "diff" },
				{ text = " M = {}", tag = "same" },
			},
		},
	}
end

function M.show_diff(diff)
	diff = get_diff() -- Temporary dummy data call
	local bufnr = vim.api.nvim_get_current_buf()
	local line_number = diff.current.line -- 0 based

	local hl_map = {
		current = {
			same = "GhostwriteDiffRed",
			diff = "GhostwriteDiffRedBright",
		},
		suggested = {
			same = "GhostwriteDiffGreen",
			diff = "GhostwriteDiffGreenBright",
		},
	}

	-- Highlight each segment of the current (original) line directly in the buffer
	-- Uses diff segments tagged as "same" or "diff" to apply highlight styles
	local function highlight_current_line()
		local col = 0

		-- Loop through each segment, each tagged with "same" or "diff"
		for _, seg in ipairs(diff.current.segments) do
			local segment_len = vim.fn.strdisplaywidth(seg.text)

			-- Apply the highlight for this segment using the mapped highlight group
			vim.api.nvim_buf_set_extmark(bufnr, ns_id, line_number, col, {
				end_col = col + segment_len,
				hl_group = hl_map.current[seg.tag], -- "same" or "diff" for normal or bright red
				hl_mode = "combine",
			})

			col = col + segment_len -- Move forward by this segment's width
		end
	end

	-- Render a virtual line beneath the current line showing the suggested change
	-- Uses diff segments tagged as "same" or "diff" to apply highlight styles
	local function render_suggested_line()
		local virt_line = {}

		-- Loop through each segment of the suggested line
		for _, seg in ipairs(diff.suggested.segments) do
			local hl = hl_map.suggested[seg.tag] -- "same" or "diff" for normal or bright green
			table.insert(virt_line, { seg.text, hl })
		end

		-- Draw the virtual line below the actual buffer line using virt_lines
		vim.api.nvim_buf_set_extmark(bufnr, ns_id, line_number, 0, {
			virt_lines = { virt_line },
			hl_mode = "combine",
		})
	end

	highlight_current_line()
	render_suggested_line()
	diff_keybinds.attach_line_listener(line_number, bufnr, ns_id)
end

-- Clear all diffs in the current buffer
function M.clear_diff()
	local bufnr = vim.api.nvim_get_current_buf()
	-- Eventually can have this clear only specific diffs by modifying 0, -1 (start, end)
	vim.api.nvim_buf_clear_namespace(bufnr, ns_id, 0, -1)
	diff_keybinds.remove_line_listener(bufnr, ns_id)
end

return M
